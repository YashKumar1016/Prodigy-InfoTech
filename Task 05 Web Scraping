#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <curl/curl.h>
#include <libxml/HTMLparser.h>
#include <libxml/xpath.h>

// Structure to store webpage content
struct MemoryStruct {
    char *memory;
    size_t size;
};

// Callback function to write data into memory
static size_t WriteMemoryCallback(void *contents, size_t size, size_t nmemb, void *userp) {
    size_t realsize = size * nmemb;
    struct MemoryStruct *mem = (struct MemoryStruct *)userp;

    char *ptr = realloc(mem->memory, mem->size + realsize + 1);
    if(ptr == NULL) {
        // Out of memory
        printf("Not enough memory (realloc returned NULL)\n");
        return 0;
    }

    mem->memory = ptr;
    memcpy(&(mem->memory[mem->size]), contents, realsize);
    mem->size += realsize;
    mem->memory[mem->size] = 0;

    return realsize;
}

// Function to fetch webpage content
char *fetch_webpage(const char *url) {
    CURL *curl_handle;
    CURLcode res;

    struct MemoryStruct chunk;

    chunk.memory = malloc(1);
    chunk.size = 0;

    curl_global_init(CURL_GLOBAL_ALL);

    curl_handle = curl_easy_init();
    curl_easy_setopt(curl_handle, CURLOPT_URL, url);
    curl_easy_setopt(curl_handle, CURLOPT_WRITEFUNCTION, WriteMemoryCallback);
    curl_easy_setopt(curl_handle, CURLOPT_WRITEDATA, (void *)&chunk);
    curl_easy_setopt(curl_handle, CURLOPT_USERAGENT, "libcurl-agent/1.0");

    res = curl_easy_perform(curl_handle);

    if(res != CURLE_OK) {
        fprintf(stderr, "curl_easy_perform() failed: %s\n", curl_easy_strerror(res));
        return NULL;
    }

    curl_easy_cleanup(curl_handle);
    curl_global_cleanup();

    return chunk.memory;
}

// Function to extract data using XPath
void parse_html_and_extract_data(const char *html_content) {
    htmlDocPtr doc = htmlReadMemory(html_content, strlen(html_content), NULL, NULL, HTML_PARSE_NOERROR | HTML_PARSE_NOWARNING);
    if (doc == NULL) {
        fprintf(stderr, "Failed to parse document\n");
        return;
    }

    xmlXPathContextPtr xpathCtx = xmlXPathNewContext(doc);
    if (xpathCtx == NULL) {
        fprintf(stderr, "Failed to create XPath context\n");
        xmlFreeDoc(doc);
        return;
    }

    FILE *file = fopen("products.csv", "w");
    if (!file) {
        perror("Failed to open file");
        xmlXPathFreeContext(xpathCtx);
        xmlFreeDoc(doc);
        return;
    }

    fprintf(file, "Name,Price,Rating\n");

    xmlXPathObjectPtr xpathObj = xmlXPathEvalExpression((xmlChar *)"//li[@class='s-item']//h3[@class='s-item__title']", xpathCtx);
    if (xpathObj && !xmlXPathNodeSetIsEmpty(xpathObj->nodesetval)) {
        xmlNodeSetPtr nodes = xpathObj->nodesetval;
        for (int i = 0; i < nodes->nodeNr; i++) {
            xmlNodePtr cur = nodes->nodeTab[i];
            char *content = (char *)xmlNodeGetContent(cur);
            fprintf(file, "\"%s\"", content);
            xmlFree(content);

            xpathObj = xmlXPathEvalExpression((xmlChar *)"//li[@class='s-item']//span[@class='s-item__price']", xpathCtx);
            if (xpathObj && !xmlXPathNodeSetIsEmpty(xpathObj->nodesetval)) {
                nodes = xpathObj->nodesetval;
                for (int j = 0; j < nodes->nodeNr; j++) {
                    cur = nodes->nodeTab[j];
                    content = (char *)xmlNodeGetContent(cur);
                    fprintf(file, ",\"%s\"", content);
                    xmlFree(content);
                }
            }

            xpathObj = xmlXPathEvalExpression((xmlChar *)"//li[@class='s-item']//div[@class='x-star-rating']", xpathCtx);
            if (xpathObj && !xmlXPathNodeSetIsEmpty(xpathObj->nodesetval)) {
                nodes = xpathObj->nodesetval;
                for (int k = 0; k < nodes->nodeNr; k++) {
                    cur = nodes->nodeTab[k];
                    content = (char *)xmlNodeGetContent(cur);
                    fprintf(file, ",\"%s\"\n", content);
                    xmlFree(content);
                }
            }
        }
    }

    fclose(file);
    xmlXPathFreeObject(xpathObj);
    xmlXPathFreeContext(xpathCtx);
    xmlFreeDoc(doc);
}

int main(void) {
    const char *url = "https://www.ebay.com/sch/i.html?_nkw=electronics";
    char *html_content = fetch_webpage(url);

    if (html_content) {
        parse_html_and_extract_data(html_content);
        free(html_content);
    }

    return 0;
}
